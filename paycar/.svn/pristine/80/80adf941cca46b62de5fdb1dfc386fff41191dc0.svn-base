package com.eastime.paycar.activitys;

import java.util.ArrayList;
import java.util.List;

import com.eastime.paycar.R;
import com.eastime.paycar.R.id;
import com.eastime.paycar.R.layout;
import com.eastime.paycar.adapters.ListViewAdapter;
import com.eastime.paycar.util.Contants;
import com.eastime.paycar.util.DBHelper;
import com.eastime.paycar.zxingdecodeing.CaptureActivity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class ReceiveCarActivity extends Activity {

	private ImageView saomiao;
	private ListView listView;
	public List<String> dataMap = new ArrayList<String>();
	ListViewAdapter lvAdapter;
	DBHelper db;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.aactivity);

		saomiao = (ImageView) findViewById(R.id.saomiao);
		// 添加触摸事件 跳转到扫描程序
		saomiao.setOnTouchListener(saomiaoListener);

		// 获取listview
		listView = (ListView) findViewById(R.id.listview);
		listView.setOnItemLongClickListener(onItemLongClick);

		// 获取本地表单数据
		getDataFromLocal();
		setDataToView();
	}

	private void getDataFromLocal() {
		db = DBHelper.getInstance();
		dataMap.clear();
		String[] columns = { "number" };
		String selection = "isdel = ?";
		String[] selectionArgs = { "0" };
		String orderBy = "createtime desc";

		Cursor cursor = db.findList(false, Contants.table2, columns, selection,
				selectionArgs, null, null, orderBy, null);
		// Cursor cursor = db.findList(false, Contants.table2);
		while (cursor.moveToNext()) {
			String danHaoNumber = cursor.getString(0);
			dataMap.add(danHaoNumber);
		}
		cursor.close();

	}

	// 长按监听事件
	private AdapterView.OnItemLongClickListener onItemLongClick = new AdapterView.OnItemLongClickListener() {

		@Override
		public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
				int position, long arg3) {
			// TODO Auto-generated method stub

			final int position1 = position;

			AlertDialog.Builder dialog = new AlertDialog.Builder(
					ReceiveCarActivity.this);

			dialog.setTitle("是否删除?");

			dialog.setPositiveButton("确定",
					new android.content.DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {

							// 数据哭删除
							deleteDanHao(position1);
							// 重新显示到界面上
							setDataToView();
							dialog.dismiss();
							Toast.makeText(ReceiveCarActivity.this, "删除成功！",
									Toast.LENGTH_LONG).show();
						}

					});

			dialog.setNegativeButton("取消",
					new android.content.DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.cancel();

						}
					});

			dialog.create().show();

			return false;
		}
	};

	// 点击加号 触发扫描程序
	private OnTouchListener saomiaoListener = new OnTouchListener() {

		@Override
		public boolean onTouch(View v, MotionEvent event) {
			// TODO Auto-generated method stub

			Intent intent = new Intent();
			intent.setClass(ReceiveCarActivity.this, CaptureActivity.class);
			startActivityForResult(intent, 1);
			return false;
		}
	};

	// 扫描返回后 处理程序
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);

		if (20 == resultCode) {

			String result = data.getStringExtra("result");
			if (null == result || "".equals(result)) {
				Toast.makeText(this, "扫描失败。。。", Toast.LENGTH_LONG).show();

				// 此处添加手工输入条码功能 dialog
				alertDialog();
				return;
			}

			Toast.makeText(this, result, 2000).show();

			saveResult(result);

		}

		if (0 == resultCode) {
			// 此处添加手工输入条码功能 dialog
			alertDialog();
		}

	}

	// 显示手动输入的界面
	protected void alertDialog() {
		// 此处添加手工输入条码功能 dialog
		AlertDialog.Builder dialog = new Builder(this);
		dialog.setTitle("请输入条码：");

		// LayoutInflater inflater = LayoutInflater.from(this);
		LayoutInflater inflater = (LayoutInflater) this
				.getSystemService(LAYOUT_INFLATER_SERVICE);
		final View sgtmT = inflater.inflate(R.layout.dialog_tiaomao, null);

		dialog.setView(sgtmT);

		dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {

				EditText e = (EditText) sgtmT.findViewById(R.id.sgtm);
				String result = e.getText().toString();
				// 必要的时候要在这里添加条码校验 TODO
				saveResult(result);

			}
		});

		dialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.cancel();
				dialog.dismiss();
			}
		});

		dialog.create().show();
	}

	// 保存结果到数据库 并调用显示函数
	protected void saveResult(String result) {
		db = DBHelper.getInstance();
		String s1 = "number = ?";
		String s2[] = { result };
		// 先判断单号存在不存在
		Cursor cursor = db.findOne(false, Contants.table2, null, s1, s2, null,
				null, null, null);
		if (cursor.moveToFirst()) {
			cursor.close();
			Toast.makeText(this, "单号已存在！", Toast.LENGTH_LONG).show();
			return;
		}
		cursor.close();
		
		ContentValues values = new ContentValues();
		values.put("number", result);
		values.put("isdel", 0);
		values.put("issucc", 2);
		values.put("isupload", 0);
		long r = db.insert(Contants.table2, values);
		
		if (r < 0) {
			Toast.makeText(this, "数据保存失败。。。。", Toast.LENGTH_LONG).show();
			return;
		}
		// 扫描成功 把单号放进listView里面呈现到页面去
		dataMap.add(result);
		setDataToView();

	}

	// 显示数据到界面
	protected void setDataToView() {
		lvAdapter = new ListViewAdapter(this, dataMap);
		listView.setAdapter(lvAdapter);
	}

	// 删除操作
	private void deleteDanHao(int position1) {
		db = DBHelper.getInstance();
		String deleteData = dataMap.get(position1);
		String whereClause = "number = ?";
		String[] whereArgs = { deleteData };
		if (db.delete(Contants.table2, whereClause, whereArgs)) {
			dataMap.remove(position1);
		} else {
			Toast.makeText(this, "单号删除失败！", Toast.LENGTH_LONG).show();
			return;
		}
	}

	@Override
	protected void onResume() {

		// 获取本地表单数据
		getDataFromLocal();
		setDataToView();

		super.onResume();
	}

}
